{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\ApexChart.svelte",
    "..\\..\\Integrations.svelte",
    "..\\..\\ApexChart.svelte",
    "..\\..\\HighChart.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import {\r\n        onMount\r\n    } from \"svelte\";\r\n    import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n \r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Alert } from \"sveltestrap\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n    \r\n    let spc = [];\r\n    import ApexCharts from 'apexcharts';\r\n    let errorMSG = \"\";\r\n    onMount(getSPC);\r\n \r\n\r\n     //GET INITIALDATA\r\n     async function getSPCLoadInitialData() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        await fetch(\"/api/v2/spc-stats/loadInitialData\");\r\n        const res = await fetch(\"/api/v2/spc-stats?limit=10&offset=1\");\r\n        loadGraphs();\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            totaldata=12;\r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteSPCALL() {\r\n        const res = await fetch(\"/api/v2/spc-stats/\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res) {\r\n            loadGraphs();\r\n            visible = true;\r\n            if (res.status==200) {\r\n                totaldata=0;\r\n                color = \"success\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all spc.\");            \r\n            }else if (res.status==400) {\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUEST\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //GET\r\n    async function getSPC() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        const res = await fetch(\"/api/v2/spc-stats?limit=10&offset=1\");\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            \r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n    async function loadGraphs() {\r\n        let MyData = [];\r\n\r\n        const resData = await fetch(\"/api/v2/spc-stats\");\r\n        MyData = spc;\r\n\r\n        var mujeres = MyData.map((dato)=> dato.female_number);\r\n        var hombres = MyData.map((dato)=> dato.male_number);\r\n        var paises = MyData.map((dato)=> {\r\n            return dato.country\r\n        });\r\n\r\n        var options = {\r\n          series: [{\r\n          name: 'Hombres',\r\n          data: hombres\r\n        }, {\r\n          name: 'Mujeres',\r\n          data: mujeres\r\n        }],\r\n          chart: {\r\n          height: 550,\r\n          type: 'area'\r\n        },\r\n        dataLabels: {\r\n          enabled: true\r\n        },\r\n        stroke: {\r\n          curve: 'smooth'\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          categories: paises\r\n        },\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n }\r\n\r\n\r\n      \r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\" on:load={loadGraphs}></script>\r\n</svelte:head>\r\n<main>\r\n\r\n    <h1>SPC Manager</h1>\r\n    <Button color=\"success\" on:click=\"{getSPCLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteSPCALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <div id=\"chart\" style=\"text-align: center;\">Suicidios por cada 100,000 personas\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n \r\n @import url(https://fonts.googleapis.com/css?family=Roboto);\r\n\r\nbody {\r\n  font-family: Roboto, sans-serif;\r\n}\r\n\r\n#chart {\r\n  max-width: 100%;\r\n  margin: 35px auto;\r\n}\r\n</style>",
    "<script>\r\n    import {\r\n        onMount\r\n    } from \"svelte\";\r\n    import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n \r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Alert } from \"sveltestrap\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n    \r\n    let spc = [];\r\n    import ApexCharts from 'apexcharts';\r\n    let errorMSG = \"\";\r\n    onMount(getSPC);\r\n \r\n\r\n     //GET INITIALDATA\r\n     async function getSPCLoadInitialData() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        await fetch(\"/api/v2/spc-stats/loadInitialData\");\r\n        const res = await fetch(\"/api/v2/spc-stats?limit=10&offset=1\");\r\n        population();\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            totaldata=12;\r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteSPCALL() {\r\n        const res = await fetch(\"/api/v2/spc-stats/\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res) {\r\n            population();\r\n            visible = true;\r\n            if (res.status==200) {\r\n                totaldata=0;\r\n                color = \"success\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all spc.\");            \r\n            }else if (res.status==400) {\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUEST\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //GET\r\n    async function getSPC() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        const res = await fetch(\"/api/v2/spc-stats?limit=10&offset=1\");\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            \r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n    \r\n    async function population() {\r\n        let MyData = [];\r\n        let populationApi = [];\r\n        let listaDensidad = [];//lista de densidad de la api\r\n        let listaapi = [];//lista de paises de la api\r\n\r\n        const resData = await fetch(\"/api/v2/spc-stats\");\r\n        MyData = await resData.json();\r\n        \r\n        /*const population = await fetch(\"https://data.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop%40public&rows=200\");\r\n        populationApi =  await population.json();\r\n        \r\n        var parse = populationApi.records;\r\n\r\n        //lista de paises de la api\r\n        for (let index = 0; index < parse.length; index++) {\r\n            listaapi.push(parse[index].fields.city);\r\n            \r\n        }*/\r\n\r\n        //mi api\r\n        var ambos = MyData.map((dato)=> dato.both_sex*1000000);\r\n        var paises = MyData.map((dato)=> dato.country);\r\n\r\n        for (let index = 0; index < paises.length; index++) {\r\n            const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/\" + paises[index]);\r\n            var density =  await densityApi.json();\r\n            listaDensidad.push(density[0].population);       \r\n        }\r\n\r\nconsole.log(listaDensidad)\r\nconsole.log(ambos)\r\n        Highcharts.chart('container', {\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            title: {\r\n                text: 'Porcentaje de suicidios respecto a densidad de un paÃ­s'\r\n            },\r\n            subtitle: {\r\n                text: 'Source: data.opendatasoft.com/'\r\n            },\r\n            xAxis: {\r\n                categories: paises,\r\n                crosshair: true\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: 'Rainfall (mm)'\r\n                }\r\n            },\r\n            tooltip: {\r\n                headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n                pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n                    '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\r\n                footerFormat: '</table>',\r\n                shared: true,\r\n                useHTML: true\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0.2,\r\n                    borderWidth: 0\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Densidad',\r\n                data: listaDensidad\r\n\r\n            }, {\r\n                name: 'Suicidios por cada 100.000 personas',\r\n                data: ambos\r\n\r\n            }]\r\n        });\r\n }\r\n\r\n\r\n      \r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load={population}></script>\r\n</svelte:head>\r\n<main>\r\n\r\n    <h1>SPC Manager</h1>\r\n    <Button color=\"success\" on:click=\"{getSPCLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteSPCALL}\">\r\n        Borrar todo\r\n    </Button>\r\n\r\n    <figure class=\"highcharts-figure\">\r\n        <div id=\"container\"></div>\r\n        <p class=\"highcharts-description\">\r\n            A basic column chart compares rainfall values between four cities.\r\n            Tokyo has the overall highest amount of rainfall, followed by New York.\r\n            The chart is making use of the axis crosshair feature, to highlight\r\n            months as they are hovered over.\r\n        </p>\r\n    </figure>\r\n</main>\r\n\r\n<style>\r\n.highcharts-figure, .highcharts-data-table table {\r\n    min-width: 310px; \r\n    max-width: 800px;\r\n    margin: 1em auto;\r\n}\r\n\r\n#container {\r\n    height: 400px;\r\n}\r\n\r\n.highcharts-data-table table {\r\n\tfont-family: Verdana, sans-serif;\r\n\tborder-collapse: collapse;\r\n\tborder: 1px solid #EBEBEB;\r\n\tmargin: 10px auto;\r\n\ttext-align: center;\r\n\twidth: 100%;\r\n\tmax-width: 500px;\r\n}\r\n.highcharts-data-table caption {\r\n    padding: 1em 0;\r\n    font-size: 1.2em;\r\n    color: #555;\r\n}\r\n.highcharts-data-table th {\r\n\tfont-weight: 600;\r\n    padding: 0.5em;\r\n}\r\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n    padding: 0.5em;\r\n}\r\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n    background: #f8f8f8;\r\n}\r\n.highcharts-data-table tr:hover {\r\n    background: #f1f7ff;\r\n}\r\n</style>",
    "\r\n<script>\r\n  import {\r\n      onMount\r\n   } from \"svelte\";\r\n   import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n\r\n    function filtro(array,cont, year){\r\n      var res=array.filter((el)=>{\r\n      return el.continent==\"europe\" && el.year==\"2017\";\r\n      });\r\n\r\n      return res;\r\n    }\r\n\r\n    async function loadGraphs(){\r\n\r\n      let MyData=[];\r\n      const resData = await fetch(\"/api/v2/poverty-stats\");\r\n      MyData = await resData.json();\r\n    \r\n \r\n      \r\n      var euro = MyData.filter((el)=>{\r\n        return el.continent==\"europe\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var asia = MyData.filter((el)=>{\r\n      return el.continent==\"asia\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var oceania =MyData.filter((el)=>{\r\n      return el.continent==\"oceania\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var africa =MyData.filter((el)=>{\r\n      return el.continent==\"africa\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var south =MyData.filter((el)=>{\r\n      return el.continent==\"south america\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var north =MyData.filter((el)=>{\r\n      return el.continent==\"north america\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n\r\n      console.log(euro);\r\n\r\n      var options = {\r\n          series: [euro,asia,oceania,africa,south,north],\r\n          chart: {\r\n          type: 'donut',\r\n        },\r\n        labels:[\"europa\",\"asia\",\"oceania\",\"africa\",\"south america\",\"north america\"],\r\n          responsive: [{\r\n            breakpoint: 480,\r\n            options: {\r\n              chart: {\r\n                width: 200\r\n              },\r\n              legend: {\r\n                position: 'bottom'\r\n              }\r\n            }\r\n          }]\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n  }\r\n\r\n    \r\n  </script>\r\n  \r\n<svelte:head>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\"on:load=\"{loadGraphs}\"></script>\r\n</svelte:head>\r\n\r\n<main>\r\n  <h1>Porcentaje de pobreza inferior del 3.2 por continente en 2017</h1>\r\n  <div id=\"chart\">\r\n  </div>\r\n</main>\r\n\r\n<style>\r\n  #chart{\r\n    width: 90%;\r\n  }\r\n</style>",
    "<script>\r\n    import{\r\n        onMount\r\n    } from \"svelte\";\r\n    import{\r\n        Alert\r\n    } from \"sveltestrap\";\r\n\r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n\r\n    let errorMSG = \"\";\r\n    onMount(getLQ);\r\n\r\n    //GET\r\n    async function getLQ() {\r\n        console.log(\"Fetching lq...\");\r\n        const res = await fetch(\"api/v2/lq-stats?limit=10&offset=1\");\r\n        LoadGraphs();\r\n        if(res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \"lq.\");\r\n        } else{\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        } \r\n    }\r\n\r\n    //GET LoadInitialData\r\n    async function getLQLoadInitialData() {\r\n\r\n        console.log(\"Fetching lq...\");\r\n        await fetch(\"/api/v2/lq-stats/loadInitialData\")\r\n        const res = await fetch(\"/api/v2/lq-stats?limit=10&offset=\"+1);\r\n        LoadGraphs();\r\n\r\n        if (res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            totaldata = 12;\r\n            console.log(\"Received \" + lq.length + \" lq.\");\r\n        } else {\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteLQALL(){\r\n        const res = await fetch(\"/api/v2/lq-stats\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res){\r\n            LoadGraphs();\r\n            visible = true;\r\n            if(res.status==200){\r\n                totaldata=0;\r\n                color = \"sucess\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all lq.\");\r\n            } else if(res.status==400){\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUST\");\r\n            } else{\r\n                color = \"danger\";\r\n                errorMSG = res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //grÃ¡fica\r\n    async function LoadGraphs(){\r\n        let MyData = [];\r\n\r\n        const resData = await fetch(\"/api/v2/lq-stats\");\r\n        MyData = await resData.json();\r\n\r\n        //xAxis\r\n        var paises = MyData.filter(function (objeto) {\r\n                return objeto.year==2016;\r\n            }).map((dato)=> [dato.country]);\r\n\r\n        //yAxis\r\n\r\n        var stab = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.stability]);\r\n\r\n        var righ = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.right]);\r\n\r\n        var heal = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.health]);\r\n\r\n        var secu = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.security]);\r\n\r\n        var clima = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.climate]);\r\n\r\n        var cost = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.costs]);\r\n\r\n        var popu = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.popularity]);\r\n\r\n\r\n        Highcharts.chart('container', {\r\n            chart: {\r\n                type: 'bar'\r\n            },\r\n            title: {\r\n                text: 'Calidad de vida por paÃ­ses del aÃ±o 2016'\r\n            },\r\n            xAxis: {\r\n                categories: paises\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: ''\r\n                }\r\n            },\r\n            legend: {\r\n                reversed: true\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    stacking: 'normal'\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Stability',\r\n                data: stab\r\n            }, {\r\n                name: 'Right',\r\n                data: righ\r\n            }, {\r\n                name: 'Health',\r\n                data: heal\r\n            }, {\r\n                name: 'Security',\r\n                data: secu\r\n            }, {\r\n                name: 'Climate',\r\n                data: clima\r\n            }, {\r\n                name: 'Costs',\r\n                data: cost\r\n            }, {\r\n                name: 'Popularity',\r\n                data: popu\r\n            }]\r\n        });\r\n\r\n\r\n};\r\n</script>\r\n\r\n\r\n<svelte:head>\r\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{LoadGraphs}\"></script>\r\n</svelte:head>\r\n\r\n<main>\r\n    <h1>LQ Manager</h1>\r\n    <Button color=\"primary\" on:click=\"{getLQLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteLQALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <figure class=\"highcharts-figure\">\r\n        <div id=\"container\"></div>\r\n        <p class=\"highcharts-description\">\r\n            En esta grÃ¡fica veremos la clasificaciÃ³n de los paÃ­ses dependiendo de su calidad de vida en 2016 basÃ¡ndonos en algunos datos de dichos paÃ­ses, como puede ser su popularidad, clima, seguridad, etc.\r\n        </p>\r\n    </figure>\r\n</main>\r\n\r\n<style>\r\n    .highcharts-figure, .highcharts-data-table table {\r\n        min-width: 310px; \r\n        max-width: 800px;\r\n        margin: 1em auto;\r\n    }\r\n\r\n    #container {\r\n        height: 400px;\r\n    }\r\n\r\n    .highcharts-data-table table {\r\n        font-family: Verdana, sans-serif;\r\n        border-collapse: collapse;\r\n        border: 1px solid #EBEBEB;\r\n        margin: 10px auto;\r\n        text-align: center;\r\n        width: 100%;\r\n        max-width: 500px;\r\n    }\r\n    .highcharts-data-table caption {\r\n        padding: 1em 0;\r\n        font-size: 1.2em;\r\n        color: #555;\r\n    }\r\n    .highcharts-data-table th {\r\n        font-weight: 600;\r\n        padding: 0.5em;\r\n    }\r\n    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n        padding: 0.5em;\r\n    }\r\n    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n        background: #f8f8f8;\r\n    }\r\n    .highcharts-data-table tr:hover {\r\n        background: #f1f7ff;\r\n    }\r\n\r\n</style>"
  ],
  "names": [],
  "mappings": "AA+IC,QAAQ,IAAI,8CAA8C,CAAC,CAAC,AAM7D,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC;ACwCD,kBAAkB,eAA+B,CAAC,AAC9C,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC;ACzGC,oBAAM,CAAC,AACL,KAAK,CAAE,GAAG,AACZ,CAAC;ACqGC,kBAAkB,eAA+B,CAAC,AAC9C,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC"
}