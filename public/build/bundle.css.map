{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\ApexChart.svelte",
    "..\\..\\Integrations.svelte",
    "..\\..\\Home.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import {\r\n        onMount\r\n    } from \"svelte\";\r\n    import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n \r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Alert } from \"sveltestrap\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n    \r\n    let spc = [];\r\n    import ApexCharts from 'apexcharts';\r\n    let errorMSG = \"\";\r\n    onMount(getSPC);\r\n \r\n\r\n     //GET INITIALDATA\r\n     async function getSPCLoadInitialData() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        await fetch(\"/api/v2/spc-stats/loadInitialData\");\r\n        const res = await fetch(\"/api/v2/spc-stats\");\r\n        loadGraphs();\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteSPCALL() {\r\n        const res = await fetch(\"/api/v2/spc-stats/\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res) {\r\n            loadGraphs();\r\n            visible = true;\r\n            if (res.status==200) {\r\n                color = \"success\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all spc.\");            \r\n            }else if (res.status==400) {\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUEST\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //GET\r\n    async function getSPC() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        const res = await fetch(\"/api/v2/spc-stats\");\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            \r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n    async function loadGraphs() {\r\n        let MyData = [];\r\n\r\n        const resData = await fetch(\"/api/v2/spc-stats\");\r\n        MyData = spc;\r\n\r\n        var mujeres = MyData.map((dato)=> dato.female_number);\r\n        var hombres = MyData.map((dato)=> dato.male_number);\r\n        var paises = MyData.map((dato)=> {\r\n            return dato.country\r\n        });\r\n\r\n        var options = {\r\n          series: [{\r\n          name: 'Hombres',\r\n          data: hombres\r\n        }, {\r\n          name: 'Mujeres',\r\n          data: mujeres\r\n        }],\r\n          chart: {\r\n          height: 550,\r\n          type: 'area'\r\n        },\r\n        dataLabels: {\r\n          enabled: true\r\n        },\r\n        stroke: {\r\n          curve: 'smooth'\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          categories: paises\r\n        },\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n }\r\n\r\n\r\n      \r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\" on:load={loadGraphs}></script>\r\n</svelte:head>\r\n<main>\r\n\r\n    <h1>SPC Manager</h1>\r\n    <Button color=\"success\" on:click=\"{getSPCLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteSPCALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <div id=\"chart\" style=\"text-align: center;\">Suicidios por cada 100,000 personas\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n \r\n @import url(https://fonts.googleapis.com/css?family=Roboto);\r\n\r\nbody {\r\n  font-family: Roboto, sans-serif;\r\n}\r\n\r\n#chart {\r\n  max-width: 100%;\r\n  margin: 35px auto;\r\n}\r\n</style>",
    "<script>\r\n    import {\r\n        onMount\r\n    } from \"svelte\";\r\n    import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n \r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Alert } from \"sveltestrap\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n    \r\n    let spc = [];\r\n    import ApexCharts from 'apexcharts';\r\n    let errorMSG = \"\";\r\n    onMount(getSPC);\r\n \r\n\r\n     //GET INITIALDATA\r\n     async function getSPCLoadInitialData() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        await fetch(\"/api/v2/spc-stats/loadInitialData\");\r\n        const res = await fetch(\"/api/v2/spc-stats\");\r\n        population();\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteSPCALL() {\r\n        const res = await fetch(\"/api/v2/spc-stats/\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res) {\r\n            population();\r\n            visible = true;\r\n            if (res.status==200) {\r\n                color = \"success\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all spc.\");            \r\n            }else if (res.status==400) {\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUEST\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //GET\r\n    async function getSPC() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        const res = await fetch(\"/api/v2/spc-stats\");\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            \r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n    \r\n    //INSERT EJEMPLOS PARA APIS\r\n    async function insertExamplesSPC() {\r\n        let newExamples = [{\r\n            country: \"sweden\",\r\n            both_sex: \"11.7\",\r\n            male_rank: \"69\",\r\n            male_number: \"15.8\",\r\n            female_rank: \"32\",\r\n            female_number: \"7.4\",\r\n            ratio: \"2.14\",\r\n            year: \"2013\",\r\n            continent: \"europe\"\r\n        },{\r\n            country: \"germany\",\r\n            both_sex: \"9.1\",\r\n            male_rank: \"90\",\r\n            male_number: \"13.6\",\r\n            female_rank: \"79\",\r\n            female_number: \"4.8\",\r\n            ratio: \"2.83\",\r\n            year: \"2013\",\r\n            continent: \"europe\"\r\n        },{\r\n            country: \"canada\",\r\n            both_sex: \"10.4\",\r\n            male_rank: \"72\",\r\n            male_number: \"15.1\",\r\n            female_rank: \"59\",\r\n            female_number: \"5.8\",\r\n            ratio: \"2.6\",\r\n            year: \"2013\",\r\n            continent: \"north america\"\r\n        }\r\n        ];\r\n\r\n        for (let index = 0; index < newExamples.length; index++) {\r\n            console.log(\"Inserting examples spc...\" + JSON.stringify(newExamples[index]));\r\n            const res = await fetch(\"/api/v2/spc-stats\", {\r\n                method: \"POST\",\r\n                body: JSON.stringify(newExamples[index]),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }).then(function (res) {\r\n                \r\n                visible = true;\r\n                if (res.status==200) {\r\n                    console.log(\"Inserted \"+newExamples[index].country +\" spc.\");            \r\n                }else if (res.status== 400) {\r\n                    console.log(\"BAD REQUEST\");            \r\n                }else if (res.status==409) {\r\n                    console.log(\"This data already exits\");            \r\n                } else {\r\n                    console.log(\"BAD REQUEST\");\r\n                }\r\n            });\r\n\r\n        }\r\n    \r\n    }\r\n\r\n\r\n\r\n\r\n    //api externa 1\r\n    async function population() {\r\n        let MyData = [];\r\n        let populationApi = [];\r\n        let listaDensidad = [];//lista de densidad de la api\r\n        let listaapi = [];//lista de paises de la api\r\n\r\n        const resData = await fetch(\"/api/v2/spc-stats\");\r\n        MyData = await resData.json();\r\n        \r\n        //mi api\r\n        var ambos = MyData.map((dato)=> dato.both_sex*1000000);\r\n        var paises = MyData.map((dato)=> dato.country);\r\n\r\n        for (let index = 0; index < paises.length; index++) {\r\n            const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/\" + paises[index]);\r\n            var density =  await densityApi.json();\r\n            listaDensidad.push(density[0].population);       \r\n        }\r\n\r\n        Highcharts.chart('container', {\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            title: {\r\n                text: 'Porcentaje de suicidios respecto a densidad de un país'\r\n            },\r\n            subtitle: {\r\n                text: 'Source: https://restcountries.eu/rest/v2/all'\r\n            },\r\n            xAxis: {\r\n                categories: paises,\r\n                crosshair: true\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: 'Rainfall (mm)'\r\n                }\r\n            },\r\n            tooltip: {\r\n                headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n                pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n                    '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\r\n                footerFormat: '</table>',\r\n                shared: true,\r\n                useHTML: true\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0.2,\r\n                    borderWidth: 0\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Densidad',\r\n                data: listaDensidad\r\n\r\n            }, {\r\n                name: 'Suicidios por cada 100.000 personas',\r\n                data: ambos\r\n\r\n            }]\r\n        });\r\n }\r\n\r\n\r\n    //api sos1920-09 (nando)\r\n    async function vehiculos() {\r\n        let dataVehiculos = []; //guardamos todos los vehiculos\r\n        let intersecMayus = [] //interseccion entre spc y vehiculos en mayus\r\n        let intersecMinus = [] //igual en minus\r\n        let listaVehiculos = [] //guardamos las variables que querempos\r\n        let listaSuicidios = []\r\n        const res = await fetch(\"https://sos1920-09.herokuapp.com/api/v3/plugin-vehicles-stats/\");\r\n        dataVehiculos = await res.json();\r\n\r\n        //busco la interseccion entre mis paises y los suyos\r\n        var paisesVehicu = dataVehiculos.map(dato => dato.country)\r\n        var paisesSpc = spc.map(dato => dato.country) //pero tengo que poner en mayus la primera letra o al reves\r\n        \r\n        for (let index = 0; index < paisesSpc.length; index++) {\r\n            paisesSpc[index]=paisesSpc[index].charAt(0).toUpperCase() + paisesSpc[index].slice(1)\r\n            \r\n        }\r\n\r\n        intersecMayus = paisesSpc.filter(x => paisesVehicu.includes(x)); //ya tengo los paises que coinciden\r\n\r\n        //hago lista para poder tenerlo en minus otra vez y buscar con mi api\r\n        for (let index = 0; index < intersecMayus.length; index++) {\r\n            intersecMinus.push(intersecMayus[index].charAt(0).toLowerCase() + intersecMayus[index].slice(1))\r\n        }\r\n        //busco los suicidios de cada pais y los coches\r\n        for (let index = 0; index < intersecMayus.length; index++) {\r\n            const vehiculosApi = await fetch(\"https://sos1920-09.herokuapp.com/api/v3/plugin-vehicles-stats?country=\" + intersecMayus[index]);\r\n            var resVehicu =  await vehiculosApi.json();\r\n            listaVehiculos.push(resVehicu[0]['pev-stock']);       \r\n\r\n            const suicidiosApi = await fetch(\"/api/v2/spc-stats?country=\" + intersecMinus[index]);\r\n            var resSuci =  await suicidiosApi.json();\r\n            listaSuicidios.push(resSuci[0].both_sex*100000);       \r\n        }\r\n\r\n        console.log(listaSuicidios)\r\n        var options = {\r\n          series: [{\r\n            name: \"Suicidios en un año\",\r\n            data: listaSuicidios\r\n          },\r\n          {\r\n            name: \"Coches vendidos en un año\",\r\n            data: listaVehiculos\r\n          }\r\n        ],\r\n          chart: {\r\n          height: 350,\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: false\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          width: [5, 7, 5],\r\n          curve: 'smooth',\r\n          dashArray: [0, 8, 5]\r\n        },\r\n        title: {\r\n          text: 'Relación venta de coche entre suicidios',\r\n          align: 'center'\r\n        },\r\n        legend: {\r\n          tooltipHoverFormatter: function(val, opts) {\r\n            return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\r\n          }\r\n        },\r\n        markers: {\r\n          size: 0,\r\n          hover: {\r\n            sizeOffset: 6\r\n          }\r\n        },\r\n        xaxis: {\r\n          categories: intersecMayus,\r\n        },\r\n        tooltip: {\r\n          y: [\r\n            {\r\n              title: {\r\n                formatter: function (val) {\r\n                  return val\r\n                }\r\n              }\r\n            },\r\n            {\r\n              title: {\r\n                formatter: function (val) {\r\n                  return val\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        grid: {\r\n          borderColor: '#f1f1f1',\r\n        }\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n    }\r\n      \r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load={population} on:load={vehiculos}></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\"></script>\r\n\r\n</svelte:head>\r\n<main>\r\n\r\n    <h1>SPC Manager</h1>\r\n    <Button color=\"success\" on:click=\"{getSPCLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteSPCALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <Button outline  color=\"primary\" on:click={insertExamplesSPC}>Insertar ejemplos</Button>\r\n    <br><br>\r\n\r\n    <!--api externa densidad-->\r\n    <h3 style=\"text-align: center;\">Integración API externa 1</h3>\r\n    <figure class=\"highcharts-figure\">\r\n        <div id=\"container\"></div>\r\n        <p class=\"highcharts-description\">\r\n            \r\n        </p>\r\n    </figure>\r\n\r\n    <br>\r\n\r\n    <!--api externa densidad--> \r\n    <h3 style=\"text-align: center;\">Integración API externa 2</h3>\r\n\r\n    <!--api nando-->\r\n    <h3 style=\"text-align: center;\">Integración API sos1920-09</h3>\r\n    <div id=\"chart\">\r\n    </div>\r\n\r\n\r\n\r\n\r\n</main>\r\n\r\n<style>\r\n.highcharts-figure, .highcharts-data-table table {\r\n    min-width: 310px; \r\n    max-width: 800px;\r\n    margin: 1em auto;\r\n}\r\n\r\n#container {\r\n    height: 400px;\r\n}\r\n\r\n.highcharts-data-table table {\r\n\tfont-family: Verdana, sans-serif;\r\n\tborder-collapse: collapse;\r\n\tborder: 1px solid #EBEBEB;\r\n\tmargin: 10px auto;\r\n\ttext-align: center;\r\n\twidth: 100%;\r\n\tmax-width: 500px;\r\n}\r\n.highcharts-data-table caption {\r\n    padding: 1em 0;\r\n    font-size: 1.2em;\r\n    color: #555;\r\n}\r\n.highcharts-data-table th {\r\n\tfont-weight: 600;\r\n    padding: 0.5em;\r\n}\r\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n    padding: 0.5em;\r\n}\r\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n    background: #f8f8f8;\r\n}\r\n.highcharts-data-table tr:hover {\r\n    background: #f1f7ff;\r\n}\r\n</style>",
    "<script>\r\n    import{\r\n        onMount\r\n    } from \"svelte\";\r\n    import{\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n    import{\r\n        Alert\r\n    } from \"sveltestrap\";\r\n\r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Collapse, CardBody, Card } from \"sveltestrap\";\r\n    let isOpen = false;\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n\r\n    let page = 1;\r\n    let totaldata = 12;\r\n    let lq =[];\r\n    let newLQ = {\r\n        rank: \"\",\r\n        country: \"\",\r\n        stability: \"\",\r\n        right: \"\",\r\n        health: \"\",\r\n        security: \"\",\r\n        climate: \"\",\r\n        costs: \"\",\r\n        popularity: \"\",\r\n        total: \"\",\r\n        year: \"\",\r\n        continent: \"\"\r\n    };\r\n    let errorMSG = \"\";\r\n    let busqueda = false;\r\n    let country = \"\";\r\n    let year = \"\";\r\n    onMount(getLQ);\r\n\r\n    //GET\r\n    async function getLQ() {\r\n        console.log(\"Fetching lq...\");\r\n        const res = await fetch(\"api/v2/lq-stats?limit=10&offset=1\");\r\n\r\n        if(res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \"lq.\");\r\n        } else{\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        } \r\n    }\r\n\r\n    //GET LoadInitialData\r\n    async function getLQLoadInitialData() {\r\n\r\n        console.log(\"Fetching lq...\");\r\n        await fetch(\"/api/v2/lq-stats/loadInitialData\")\r\n        const res = await fetch(\"/api/v2/lq-stats?limit=10&offset=\"+1);\r\n        \r\n\r\n        if (res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            totaldata = 12;\r\n            console.log(\"Received \" + lq.length + \" lq.\");\r\n        } else {\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //SEARCH\r\n    async function searchLQ(country, year){\r\n        console.log (\"país: \"+ country + \" año: \"+year);\r\n        let url = \"api/v2/lq-stats?\";\r\n\r\n        if(country.length!=0){\r\n            url+=\"&country=\"+country;\r\n        }\r\n        if(year.length!=0){\r\n            url+=\"&year= \"+year;\r\n        }\r\n\r\n        const res = await fetch(url);\r\n        visible = true;\r\n        busqueda=true;\r\n        if(res.ok) {\r\n            color = \"success\";\r\n            errorMSG = \"Se ha encontrado el objeto correctamente\";\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(json);\r\n\r\n            console.log(\"Búsqueda realizada: \"+ JSON.stringify(lq[0],null,2));\r\n\r\n        }else{\r\n            console.log(\"ERROR!\");\r\n            visible = true;\r\n            if(res.status==404){\r\n                color = \"danger\";\r\n                errorMSG = \"Elemento no encontrado.\";\r\n                console.log(\"NOT FOUND\")\r\n                \r\n            }else{\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo de petición\";\r\n                console.log(\"BAD REQUEST\");\r\n               \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //Reiniciar filtro search\r\n    async function resetLQ(){\r\n        country = \"\";\r\n        year = \"\";\r\n    }\r\n\r\n    //INSERT\r\n    async function insertLQ(){\r\n        console.log(\"Inserting lq...\" + JSON.stringify(newLQ));\r\n        const res = await fetch(\"/api/v2/lq-stats\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(newLQ),\r\n            headers:{\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(function (res){\r\n            getLQ();\r\n            visible = true;\r\n            if (res.status==200){\r\n                totaldata++;\r\n                color = \"success\";\r\n                errorMSG = newLQ.country +\" creado correctamente\"\r\n                console.log(\"Inserted\" +newLQ.country +\" lq.\");\r\n            } else if(res.status==400){\r\n                color = \"danger\";\r\n                errorMSG = \"Formato incorrecto, compruebe que 'Country' y 'Year' estén rellenos.\";\r\n                console.log(\"BAD REQUEST\");\r\n            }else if (res.status==409) {\r\n                color = \"danger\";\r\n                errorMSG = newLQ.country +\" \" +newLQ.year +\"  ya existe, recuerde que 'Year' y 'Country' son exclusivos.\";\r\n                console.log(\"This data already exits\");\r\n            }else{\r\n                color = \"danger\";\r\n                errorMSG = \"Formato incorrecto, compruebe que 'Country' y 'Year' estén rellenos.\";\r\n            }\r\n        });     \r\n    }\r\n\r\n    //DELETE SPECIFIC\r\n    async function deleteLQ(country, year){\r\n        const res = await fetch(\"/api/v2/lq-stats/\" + country + \"/\" + year, {\r\n            method: \"DELETE\"\r\n        }).then(function (res){\r\n            visible =true;\r\n            getLQ();\r\n            if (res.status==200) {\r\n                totaldata--;\r\n                color = \"success\";\r\n                errorMSG = country + \" \" + year + \" borrado correctamente\";\r\n                console.log(\"Deleted \" + country);            \r\n            }else if (res.status==404) {\r\n                color = \"danger\";\r\n                errorMSG = \"No se ha encontrado el objeto \" + country;\r\n                console.log(\"LIFEQ NOT FOUND\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }      \r\n        });\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteLQALL(){\r\n        const res = await fetch(\"/api/v2/lq-stats\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res){\r\n            getLQ();\r\n            visible = true;\r\n            if(res.status==200){\r\n                totaldata=0;\r\n                color = \"sucess\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all lq.\");\r\n            } else if(res.status==400){\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUST\");\r\n            } else{\r\n                color = \"danger\";\r\n                errorMSG = res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //getNextPage\r\n    async function getNextPage(){\r\n        console.log(totaldata);\r\n        page+=10;\r\n        if (page >totaldata){\r\n            page -= 10;\r\n        }\r\n        console.log(\"Charging page \"+ page);\r\n        const res = await fetch(\"/api/v2/lq-stats?limit=10&offset=\"+page);\r\n\r\n        if (res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \" lq.\");\r\n        } else{\r\n            errorMSG = res.status + \":\" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //getPreviewPage\r\n    async function getPreviewPage() {\r\n \r\n        if (page-10>=1) {\r\n            page-=10; \r\n        } else page = 1\r\n        console.log(\"Charging page \" +page);\r\n        const res = await fetch(\"/api/v2/lq-stats?limit=10&offset=\"+page);\r\n\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \" lq.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    async function LoadGraphs(){\r\n        let MyData = [];\r\n\r\n        const resData = await fetch(\"/api/v2/lq-stats\");\r\n        MyData = await resData.json();\r\n\r\n        //xAxis\r\n        var paises = MyData.filter(function (objeto) {\r\n                return objeto.year==2016;\r\n            }).map((dato)=> [dato.country]);\r\n\r\n        //yAxis\r\n\r\n        var stab = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.stability]);\r\n\r\n        var righ = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.right]);\r\n\r\n        var heal = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.health]);\r\n\r\n        var secu = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.security]);\r\n\r\n        var clima = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.climate]);\r\n\r\n        var cost = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.costs]);\r\n\r\n        var popu = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.popularity]);\r\n\r\n\r\n        Highcharts.chart('container', {\r\n            chart: {\r\n                type: 'bar'\r\n            },\r\n            title: {\r\n                text: 'Calidad de vida por países del año 2016'\r\n            },\r\n            xAxis: {\r\n                categories: paises\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: ''\r\n                }\r\n            },\r\n            legend: {\r\n                reversed: true\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    stacking: 'normal'\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Stability',\r\n                data: stab\r\n            }, {\r\n                name: 'Right',\r\n                data: righ\r\n            }, {\r\n                name: 'Health',\r\n                data: heal\r\n            }, {\r\n                name: 'Security',\r\n                data: secu\r\n            }, {\r\n                name: 'Climate',\r\n                data: clima\r\n            }, {\r\n                name: 'Costs',\r\n                data: cost\r\n            }, {\r\n                name: 'Popularity',\r\n                data: popu\r\n            }]\r\n        });\r\n\r\n\r\n};\r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{LoadGraphs}\"></script>\r\n</svelte:head>\r\n\r\n<main>\r\n    <h1>LQ Manager</h1>\r\n    {#await lq}\r\n        Loading lq...\r\n    {:then lq}\r\n\r\n\r\n    <Button color=\"primary\" on:click={() => (isOpen = !isOpen)} class=\"mb-3\">\r\n        Buscar lq\r\n    </Button>\r\n    <Collapse {isOpen}>\r\n        <Table responsive>\r\n\r\n            <tbody>\r\n                <tr>\r\n                    \r\n                    Country: <input type=\"text\" bind:value=\"{country}\"> Year: <input type=\"text\" bind:value=\"{year}\">\r\n                    \r\n                    <Button outline color=\"info\" on:click=\"{searchLQ(country, year)}\">\r\n                        Buscar\r\n                    </Button>\r\n                    {#if busqueda==true}\r\n                    <Button outline color=\"info\" on:click=\"{resetLQ}\">\r\n                        Reiniciar filtro\r\n                    </Button>\r\n                    {/if}\r\n\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    </Collapse>\r\n\r\n        <div>\r\n            <Alert color={color} isOpen={visible} toggle={() => (visible = false)}>\r\n                {#if errorMSG}\r\n                    {errorMSG}\r\n                {/if}\r\n            </Alert>\r\n        </div>\r\n\r\n        <Table bordered responsive>\r\n                <thead>\r\n                    <tr><th>Action</th>\r\n                        <th>Rank</th>\r\n                        <th>Country</th>\r\n                        <th>Stability</th>\r\n                        <th>Right</th>\r\n                        <th>Health</th>\r\n                        <th>Security</th>\r\n                        <th>Climate</th>\r\n                        <th>Costs</th>\r\n                        <th>Popularity</th>\r\n                        <th>Total</th>\r\n                        <th>Year</th>\r\n                        <th>Continent</th>\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <!-- INSERTAR -->\r\n                <tbody>\r\n                    <tr><td><Button outline color=\"primary\" on:click={insertLQ}>Insertar</Button></td>\r\n                        <td><input bind:value=\"{newLQ.rank}\"></td>\r\n                        <td><input bind:value=\"{newLQ.country}\"></td>\r\n                        <td><input bind:value=\"{newLQ.stability}\"></td>\r\n                        <td><input bind:value=\"{newLQ.right}\"></td>\r\n                        <td><input bind:value=\"{newLQ.health}\"></td>\r\n                        <td><input bind:value=\"{newLQ.security}\"></td>\r\n                        <td><input bind:value=\"{newLQ.climate}\"></td>\r\n                        <td><input bind:value=\"{newLQ.costs}\"></td>\r\n                        <td><input bind:value=\"{newLQ.popularity}\"></td>\r\n                        <td><input bind:value=\"{newLQ.total}\"></td>\r\n                        <td><input bind:value=\"{newLQ.year}\"></td>\r\n                        <td><input bind:value=\"{newLQ.continent}\"></td>\r\n                        \r\n                    </tr>\r\n                    <!-- GET -->\r\n                    {#each lq as lifeq}\r\n                    <tr><td><Button outline color=\"danger\" on:click=\"{deleteLQ(lifeq.country, lifeq.year)}\">Borrar</Button></td>\r\n                        <td>{lifeq.rank}</td>\r\n                        <td><a href=\"#/lq-stats/{lifeq.country}/{lifeq.year}\">{lifeq.country}</a></td>\r\n                        <td>{lifeq.stability}</td>\r\n                        <td>{lifeq.right}</td>\r\n                        <td>{lifeq.health}</td>\r\n                        <td>{lifeq.security}</td>\r\n                        <td>{lifeq.climate}</td>\r\n                        <td>{lifeq.costs}</td>\r\n                        <td>{lifeq.popularity}</td>\r\n                        <td>{lifeq.total}</td>\r\n                        <td><a href=\"#/lq-stats/{lifeq.country}/{lifeq.year}\">{lifeq.year}</a></td>\r\n                        <td>{lifeq.continent}</td>\r\n                        \r\n                    </tr>\r\n                    {/each}\r\n                </tbody>\r\n        </Table>\r\n        <Button color=\"primary\" on:click=\"{getLQLoadInitialData}\">\r\n            Reiniciar ejemplos iniciales\r\n        </Button>\r\n        <Button color=\"danger\" on:click=\"{deleteLQALL}\">\r\n            Borrar todo\r\n        </Button>\r\n        <Button outline color=\"success\" on:click=\"{getPreviewPage}\">\r\n           Volver\r\n        </Button>\r\n        <Button outline color=\"success\" on:click=\"{getNextPage}\">\r\n           Siguiente\r\n        </Button>\r\n    {/await}\r\n    <br>\r\n    <br>\r\n    <Button outline color=\"secondary\" on:click=\"{pop}\">Volver</Button>\r\n\r\n    <figure class=\"highcharts-figure\">\r\n        <div id=\"container\"></div>\r\n        <p class=\"highcharts-description\">\r\n            En esta gráfica veremos la clasificación de los países dependiendo de su calidad de vida en 2016\r\n        </p>\r\n    </figure>\r\n</main>\r\n\r\n<style>\r\n    .highcharts-figure, .highcharts-data-table table {\r\n        min-width: 310px; \r\n        max-width: 800px;\r\n        margin: 1em auto;\r\n    }\r\n\r\n    #container {\r\n        height: 400px;\r\n    }\r\n\r\n    .highcharts-data-table table {\r\n        font-family: Verdana, sans-serif;\r\n        border-collapse: collapse;\r\n        border: 1px solid #EBEBEB;\r\n        margin: 10px auto;\r\n        text-align: center;\r\n        width: 100%;\r\n        max-width: 500px;\r\n    }\r\n    .highcharts-data-table caption {\r\n        padding: 1em 0;\r\n        font-size: 1.2em;\r\n        color: #555;\r\n    }\r\n    .highcharts-data-table th {\r\n        font-weight: 600;\r\n        padding: 0.5em;\r\n    }\r\n    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n        padding: 0.5em;\r\n    }\r\n    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n        background: #f8f8f8;\r\n    }\r\n    .highcharts-data-table tr:hover {\r\n        background: #f1f7ff;\r\n    }\r\n\r\n</style>"
  ],
  "names": [],
  "mappings": "AA6IC,QAAQ,IAAI,8CAA8C,CAAC,CAAC,AAM7D,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC;ACoND,kBAAkB,eAA+B,CAAC,AAC9C,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC;ACoGG,kBAAkB,8BAA+B,CAAC,AAC9C,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,8BAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC,AAuBD,sBAAsB,CAAC,oBAAK,CAAC,EAAE,eAA4C,CAAC,AACxE,UAAU,CAAE,OAAO,AACvB,CAAC"
}