{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\ApexChart.svelte",
    "..\\..\\Integrations.svelte",
    "..\\..\\ApexChart.svelte",
    "..\\..\\HighChart.svelte",
    "..\\..\\Integrations.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import {\r\n        onMount\r\n    } from \"svelte\";\r\n    import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n \r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Alert } from \"sveltestrap\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n    \r\n    let spc = [];\r\n    import ApexCharts from 'apexcharts';\r\n    let errorMSG = \"\";\r\n    onMount(getSPC);\r\n \r\n\r\n     //GET INITIALDATA\r\n     async function getSPCLoadInitialData() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        await fetch(\"/api/v3/spc-stats/loadInitialData\");\r\n        const res = await fetch(\"/api/v3/spc-stats\");\r\n        loadGraphs();\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteSPCALL() {\r\n        const res = await fetch(\"/api/v3/spc-stats/\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res) {\r\n            loadGraphs();\r\n            visible = true;\r\n            if (res.status==200) {\r\n                color = \"success\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all spc.\");            \r\n            }else if (res.status==400) {\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUEST\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //GET\r\n    async function getSPC() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        const res = await fetch(\"/api/v3/spc-stats\");\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            \r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n    async function loadGraphs() {\r\n        let MyData = [];\r\n\r\n        const resData = await fetch(\"/api/v3/spc-stats\");\r\n        MyData = spc;\r\n\r\n        var mujeres = MyData.map((dato)=> dato.female_number);\r\n        var hombres = MyData.map((dato)=> dato.male_number);\r\n        var paises = MyData.map((dato)=> {\r\n            return dato.country\r\n        });\r\n\r\n        var options = {\r\n          series: [{\r\n          name: 'Hombres',\r\n          data: hombres\r\n        }, {\r\n          name: 'Mujeres',\r\n          data: mujeres\r\n        }],\r\n          chart: {\r\n          height: 550,\r\n          type: 'area'\r\n        },\r\n        dataLabels: {\r\n          enabled: true\r\n        },\r\n        stroke: {\r\n          curve: 'smooth'\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          categories: paises\r\n        },\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n }\r\n\r\n\r\n      \r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\" on:load={loadGraphs}></script>\r\n</svelte:head>\r\n<main>\r\n\r\n    <h1>SPC Manager</h1>\r\n    <Button color=\"success\" on:click=\"{getSPCLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteSPCALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <div id=\"chart\" style=\"text-align: center;\">Suicidios por cada 100,000 personas\r\n    </div>\r\n</main>\r\n\r\n<style>\r\n \r\n @import url(https://fonts.googleapis.com/css?family=Roboto);\r\n\r\nbody {\r\n  font-family: Roboto, sans-serif;\r\n}\r\n\r\n#chart {\r\n  max-width: 100%;\r\n  margin: 35px auto;\r\n}\r\n</style>",
    "<script>\r\n    import {\r\n        onMount\r\n    } from \"svelte\";\r\n    import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n \r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n    import { Alert } from \"sveltestrap\";\r\n    \r\n    let spc = [];\r\n    import ApexCharts from 'apexcharts';\r\n    let errorMSG = \"\";\r\n    onMount(getSPC);\r\n \r\n    //densidad de españa\r\n    var denspain = 0;\r\n\r\n    function minusMayus(palabra, estado) {\r\n        if (estado==true) {\r\n                palabra=palabra.charAt(0).toUpperCase() + palabra.slice(1)  \r\n        } else {\r\n                palabra=palabra.charAt(0).toLowerCase() + palabra.slice(1)  \r\n        }\r\n        return palabra\r\n    }\r\n\r\n     //GET INITIALDATA\r\n     async function getSPCLoadInitialData() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        await fetch(\"/api/v3/spc-stats/loadInitialData\");\r\n        const res = await fetch(\"/api/v3/spc-stats\");\r\n        population();\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteSPCALL() {\r\n        const res = await fetch(\"/api/v3/spc-stats/\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res) {\r\n            population();\r\n            visible = true;\r\n            if (res.status==200) {\r\n                color = \"success\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all spc.\");            \r\n            }else if (res.status==400) {\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUEST\");            \r\n            } else {\r\n                color = \"danger\";\r\n                errorMSG= res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //GET\r\n    async function getSPC() {\r\n \r\n        console.log(\"Fetching spc...\");\r\n        const res = await fetch(\"/api/v3/spc-stats\");\r\n        if (res.ok) {\r\n            console.log(\"Ok:\");\r\n            const json = await res.json();\r\n            spc = json;\r\n            \r\n            console.log(\"Received \" + spc.length + \" spc.\");\r\n        } else {\r\n            errorMSG= res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n    \r\n\r\n    //api externa 1\r\n    async function population() {\r\n        let MyData = [];\r\n        let populationApi = [];\r\n        let listaDensidad = [];//lista de densidad de la api\r\n        let listaapi = [];//lista de paises de la api\r\n\r\n        const resData = await fetch(\"/api/v3/spc-stats\");\r\n        MyData = await resData.json();\r\n        \r\n        //mi api\r\n        var ambos = [];\r\n        var paises = MyData.map((dato)=> dato.country);\r\n\r\n        for (let index = 0; index < paises.length; index++) {\r\n            const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/\" + paises[index]);\r\n            var density =  await densityApi.json();\r\n            listaDensidad.push(density[0].population);       \r\n            ambos.push(MyData[index].both_sex*density[0].population/100); //deberia ser entre 100000 pero si no apena se ve\r\n        }\r\n\r\n        Highcharts.chart('container', {\r\n            chart: {\r\n                type: 'column'\r\n            },\r\n            title: {\r\n                text: 'Porcentaje de suicidios respecto a densidad de un país'\r\n            },\r\n            subtitle: {\r\n                text: 'Source: https://restcountries.eu/rest/v2/all'\r\n            },\r\n            xAxis: {\r\n                categories: paises,\r\n                crosshair: true\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: 'Rainfall (mm)'\r\n                }\r\n            },\r\n            tooltip: {\r\n                headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\r\n                pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\r\n                    '<td style=\"padding:0\"><b>{point.y:.1f} mm</b></td></tr>',\r\n                footerFormat: '</table>',\r\n                shared: true,\r\n                useHTML: true\r\n            },\r\n            plotOptions: {\r\n                column: {\r\n                    pointPadding: 0.2,\r\n                    borderWidth: 0\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Densidad',\r\n                data: listaDensidad\r\n\r\n            }, {\r\n                name: 'Suicidios por cada 100.000 personas',\r\n                data: ambos\r\n\r\n            }]\r\n        });\r\n }\r\n\r\n\r\n    //api sos1920-09 (nando)\r\n    async function vehiculos() {\r\n        let dataVehiculos = []; //guardamos todos los vehiculos\r\n        let intersecMayus = [] //interseccion entre spc y vehiculos en mayus\r\n        let intersecMinus = [] //igual en minus\r\n        let listaVehiculos = [] //guardamos las variables que querempos\r\n        let listaSuicidios = []\r\n        const res = await fetch(\"https://sos1920-09.herokuapp.com/api/v3/plugin-vehicles-stats/\");\r\n        dataVehiculos = await res.json();\r\n\r\n        //busco la interseccion entre mis paises y los suyos\r\n        var paisesVehicu = dataVehiculos.map(dato => dato.country)\r\n        var paisesSpc = spc.map(dato => dato.country) //pero tengo que poner en mayus la primera letra o al reves\r\n\r\n        for (let index = 0; index < paisesSpc.length; index++) {\r\n            paisesSpc[index]= minusMayus(paisesSpc[index], true)\r\n        }\r\n\r\n        intersecMayus = paisesSpc.filter(x => paisesVehicu.includes(x)); //ya tengo los paises que coinciden\r\n\r\n        //hago lista para poder tenerlo en minus otra vez y buscar con mi api\r\n        for (let index = 0; index < intersecMayus.length; index++) {\r\n            intersecMinus.push(minusMayus(intersecMayus[index], false))\r\n        }\r\n        //busco los suicidios de cada pais y los coches\r\n        for (let index = 0; index < intersecMayus.length; index++) {\r\n            const vehiculosApi = await fetch(\"https://sos1920-09.herokuapp.com/api/v3/plugin-vehicles-stats?country=\" + intersecMayus[index]);\r\n            var resVehicu =  await vehiculosApi.json();\r\n            listaVehiculos.push(resVehicu[0]['pev-stock']);       \r\n\r\n            const suicidiosApi = await fetch(\"/api/v3/spc-stats?country=\" + intersecMinus[index]);\r\n            var resSuci =  await suicidiosApi.json();\r\n\r\n            const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/\" + intersecMinus[index]);\r\n            var density =  await densityApi.json();\r\n            listaSuicidios.push(parseInt(resSuci[0].both_sex*density[0].population/10000)); //entre 10000 para que se vea bien      \r\n        }\r\n\r\n        var options = {\r\n          series: [{\r\n            name: \"Suicidios en un año\",\r\n            data: listaSuicidios\r\n          },\r\n          {\r\n            name: \"Coches vendidos en un año\",\r\n            data: listaVehiculos\r\n          }\r\n        ],\r\n          chart: {\r\n          height: 350,\r\n          type: 'line',\r\n          zoom: {\r\n            enabled: false\r\n          },\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        stroke: {\r\n          width: [5, 7, 5],\r\n          curve: 'smooth',\r\n          dashArray: [0, 8, 5]\r\n        },\r\n        title: {\r\n          text: 'Relación venta de coche entre suicidios',\r\n          align: 'center'\r\n        },\r\n        legend: {\r\n          tooltipHoverFormatter: function(val, opts) {\r\n            return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\r\n          }\r\n        },\r\n        markers: {\r\n          size: 0,\r\n          hover: {\r\n            sizeOffset: 6\r\n          }\r\n        },\r\n        xaxis: {\r\n          categories: intersecMayus,\r\n        },\r\n        tooltip: {\r\n          y: [\r\n            {\r\n              title: {\r\n                formatter: function (val) {\r\n                  return val\r\n                }\r\n              }\r\n            },\r\n            {\r\n              title: {\r\n                formatter: function (val) {\r\n                  return val\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        grid: {\r\n          borderColor: '#f1f1f1',\r\n        }\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n    }\r\n    // on:load={vehiculos}\r\n      \r\n    //api sos1920-02 bicis\r\n    async function bicis(){\r\n        let dataBicis = []; //guardamos todos los datos de bicis de 2015\r\n        let listaDonut = []\r\n        const res = await fetch(\"https://sos1920-02.herokuapp.com/api/v2/evolution-of-cycling-routes?year=2015\");\r\n        dataBicis = await res.json();\r\n\r\n        //hacemos map para el carril metropolitano\r\n        listaDonut.push(parseInt(dataBicis.map(dato=> dato.metropolitan).reduce((a, b) => a + b, 0)))\r\n        listaDonut.push(parseInt(dataBicis.map(dato=> dato.urban).reduce((a, b) => a + b, 0)))\r\n        listaDonut.push(parseInt(dataBicis.map(dato=> dato.rest).reduce((a, b) => a + b, 0)))\r\n\r\n        var espa = spc.filter(dato => dato.country==\"spain\")\r\n\r\n        const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/spain\");\r\n        var density =  await densityApi.json();\r\n        \r\n        //meto en variable españa para no llamar mil veces\r\n        denspain = density[0].population\r\n\r\n        listaDonut.push(parseInt(espa.map(x=>x.both_sex)[0]*denspain/100000))\r\n\r\n        var options = {\r\n          series: listaDonut,\r\n          chart: {\r\n          width: '70%',\r\n          type: 'pie',\r\n        },\r\n        grid: {\r\n          padding: {\r\n            left: 300,\r\n            right: 0\r\n          }\r\n        },\r\n        labels: [\"Carril Metropolitano\", \"Carril Urbano\", \"Carril Otros\", \"Suicidios\"],\r\n        theme: {\r\n          monochrome: {\r\n            enabled: false\r\n          }\r\n        },\r\n        plotOptions: {\r\n          pie: {\r\n            dataLabels: {\r\n              offset: -5\r\n            }\r\n          }\r\n        },\r\n        title: {\r\n          text: \"\",\r\n          align: 'right'\r\n        },\r\n        dataLabels: {\r\n          formatter(val, opts) {\r\n            const name = opts.w.globals.labels[opts.seriesIndex]\r\n            return [name, val.toFixed(1) + '%']\r\n          }\r\n        },\r\n        legend: {\r\n          show: false\r\n        }\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart4\"), options);\r\n        chart.render();    }// on:load={bicis}\r\n\r\n    //api sos1920-04 roads kilometros de carretera\r\n    async function roads(){\r\n        let dataRoads = []; //guardamos todos los datos de bicis de 2015\r\n        let dataSui = []\r\n\r\n        const res2 = await fetch(\"http://sos1920-04.herokuapp.com/api/v1/roads/\");\r\n        dataRoads = await res2.json();\r\n        \r\n        const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/spain\");\r\n        var density =  await densityApi.json();\r\n        \r\n        var spainSui=parseInt(spc.filter(x => x.country==\"spain\").map(x=>x.both_sex)[0]*denspain/100000)\r\n        //repito la variable para que se  me quede en una linea recta al menos\r\n        for (let index = 0; index < dataRoads.length; index++) {\r\n            dataSui.push(spainSui)    \r\n        }\r\n\r\n        var totalRoads = dataRoads.map(dato=> dato.total)//hacemos map para coger el total de distancia\r\n        var totalProvincia =dataRoads.map(dato=> dato.province)\r\n\r\n        var options = {\r\n                series: [{\r\n                name: 'Total de carreteras por provincia',\r\n                type: 'column',\r\n                data: totalRoads\r\n                }, {\r\n                name: 'Nº suicidios en un año',\r\n                type: 'line',\r\n                data: dataSui\r\n                }],\r\n                chart: {\r\n                height: 350,\r\n                type: 'line',\r\n                },\r\n                stroke: {\r\n                width: [0, 4]\r\n                },\r\n                title: {\r\n                text: 'Relación total distancia de carreteras en España con el número de víctimas de suicidio',\r\n                align: 'center'\r\n                },\r\n                dataLabels: {\r\n                enabled: false,\r\n                enabledOnSeries: [1]\r\n                },\r\n                labels:totalProvincia,\r\n                xaxis: {\r\n                type: 'category'\r\n                },\r\n                yaxis: [{\r\n                title: {\r\n                    text: 'Total de carreteras por provincia',\r\n                },\r\n                \r\n                }, {\r\n                opposite: true,\r\n                title: {\r\n                    text: 'Nº suicidios en un año'\r\n                }\r\n            }]\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart3\"), options);\r\n        chart.render();\r\n    } \r\n    // on:load={roads}\r\n\r\n    //api sos1920-06 roads kilometros de carretera\r\n    async function hospitalized(){\r\n    let dataHospi = []; //guardamos todos los datos de bicis de 2015\r\n\r\n    const res3 = await fetch(\"/api/v2/not-hospitalized-stats\"+\"?year=2014\");\r\n    dataHospi = await res3.json();\r\n    \r\n    var interHospi = []\r\n    var urbanHospi = []\r\n    //hacemos map para el interurban y urban\r\n    for (let index = 0; index < spc.length; index++) {\r\n      if (spc[index].country==\"spain\") {\r\n        interHospi.push(dataHospi.map(dato=>  dato.interurban).reduce((a, b) => a + b, 0))\r\n        urbanHospi.push(dataHospi.map(dato=>  dato.urban).reduce((a, b) => a + b, 0))\r\n      } else {\r\n        interHospi.push(0)\r\n        urbanHospi.push(0)\r\n\r\n      }      \r\n    }\r\n    \r\n\r\n    var paises = spc.map(dato=>  dato.country)\r\n    var suici = spc.map(dato=>  dato.both_sex)\r\n    var suiciXdensidad = []\r\n    for (let index = 0; index < paises.length; index++) {\r\n        const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/\" + paises[index]);\r\n        var density =  await densityApi.json();\r\n        suiciXdensidad.push(parseInt(suici[index]*denspain/100000));           \r\n    }\r\n    var suici = spc.map(dato=>  dato.both_sex)\r\n\r\n    var options = {\r\n      series: [{\r\n      name: 'No hospitalizados interurbanos',\r\n      type: 'column',\r\n      data: interHospi\r\n    }, {\r\n      name: 'No hospitalizados urbanos',\r\n      type: 'column',\r\n      data: urbanHospi\r\n    }, {\r\n      name: 'Suicidios en un año',\r\n      type: 'line',\r\n      data: suiciXdensidad\r\n    }],\r\n      chart: {\r\n      height: 350,\r\n      type: 'line',\r\n      stacked: false\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    stroke: {\r\n      width: [1, 1, 4]\r\n    },\r\n    title: {\r\n      text: 'Relación entre suicidios y personas no hospitalizadas',\r\n      align: 'center',\r\n      offsetX: 0\r\n    },\r\n    xaxis: {\r\n      categories: paises,\r\n    },\r\n    yaxis: [\r\n      {\r\n        axisTicks: {\r\n          show: true,\r\n        },\r\n        axisBorder: {\r\n          show: true,\r\n          color: '#008FFB'\r\n        },\r\n        labels: {\r\n          style: {\r\n            colors: '#008FFB',\r\n          }\r\n        },\r\n        title: {\r\n          text: \"No hospitalizados interurbanos\",\r\n          style: {\r\n            color: '#008FFB',\r\n          }\r\n        },\r\n        tooltip: {\r\n          enabled: true\r\n        }\r\n      },\r\n      {\r\n        seriesName: 'Income',\r\n        opposite: false,\r\n        axisTicks: {\r\n          show: true,\r\n        },\r\n        axisBorder: {\r\n          show: true,\r\n          color: '#00E396'\r\n        },\r\n        labels: {\r\n          style: {\r\n            colors: '#00E396',\r\n          }\r\n        },\r\n        title: {\r\n          text: \"No hospitalizados urbanos\",\r\n          style: {\r\n            color: '#00E396',\r\n          }\r\n        },\r\n      },\r\n      {\r\n        seriesName: 'Revenue',\r\n        opposite: true,\r\n        axisTicks: {\r\n          show: true,\r\n        },\r\n        axisBorder: {\r\n          show: true,\r\n          color: '#FEB019'\r\n        },\r\n        labels: {\r\n          style: {\r\n            colors: '#FEB019',\r\n          },\r\n        },\r\n        title: {\r\n          text: \"Suicidios en un año\",\r\n          style: {\r\n            color: '#FEB019',\r\n          }\r\n        }\r\n      },\r\n    ],\r\n    tooltip: {\r\n      fixed: {\r\n        enabled: true,\r\n        position: 'topLeft', // topRight, topLeft, bottomRight, bottomLeft\r\n        offsetY: 30,\r\n        offsetX: 60\r\n      },\r\n    },\r\n    legend: {\r\n      horizontalAlign: 'left',\r\n      offsetX: 40\r\n    }\r\n    };\r\n\r\n    var chart = new ApexCharts(document.querySelector(\"#chart5\"), options);\r\n    chart.render();\r\n} \r\n    // on:load={hospitalized}\r\n\r\n    //api  covid\r\n    async function covid(){\r\n        let dataCovid = []; //guardamos todos los datos de bicis de 2015\r\n        let miApi = [];\r\n        let miApiMayus = []\r\n\r\n        const res = await fetch(\"https://akashraj.tech/corona/api\");\r\n        dataCovid = await res.json();\r\n        \r\n        const res2 = await fetch(\"https://sos1920-27.herokuapp.com/api/v3/spc-stats\");\r\n        miApi = await res2.json();\r\n        \r\n        var paises =  dataCovid.countries_stat\r\n        var nombrePai = paises.map(x => x.country_name)\r\n        \r\n        for (let index = 0; index < miApi.length; index++) {\r\n            miApiMayus.push(minusMayus(miApi[index].country, true))\r\n            \r\n        }\r\n        var inters = nombrePai.filter(x => miApiMayus.includes(x));\r\n\r\n        var estadisdeath = [] //deaths_per_1m_population\r\n        var estadiscases = [] //total_cases_per_1m_population\r\n\r\n        var suici = []\r\n        for (let index = 0; index < paises.length; index++) {\r\n                if (inters.includes(paises[index].country_name)) {\r\n                    var punto1= paises[index].deaths_per_1m_population.replace(\",\", \".\")                    \r\n                    for (let j = 0; j < miApi.length; j++) { //para no hacer mil llamadas a mi api\r\n                        if (miApi[j].country==minusMayus(paises[index].country_name)) {\r\n                          const densityApi = await fetch(\"https://restcountries.eu/rest/v2/name/\" + miApi[j].country);\r\n                          var density =  await densityApi.json();\r\n                          suici.push(parseInt(miApi[j].both_sex*density[0].population/100000))\r\n                          estadisdeath.push(parseInt(punto1*density[0].population/1000000))\r\n                        }\r\n                        \r\n                    }\r\n            }\r\n            \r\n        }\r\n\r\n        var options = {\r\n            series: [{\r\n            name: 'Muertes por cada millón de habitantes',\r\n            data: estadisdeath\r\n            }, {\r\n            name: 'Suicidios en un año',\r\n            data: suici\r\n            }],\r\n            chart: {\r\n            type: 'bar',\r\n            height: 350,\r\n            stacked: true,\r\n            },\r\n            plotOptions: {\r\n            bar: {\r\n                horizontal: true,\r\n            },\r\n            },\r\n            stroke: {\r\n            width: 1,\r\n            colors: ['#fff']\r\n            },\r\n            title: {\r\n            text: 'Casos de suicidio frente a coronavirus',\r\n            align: 'center'\r\n            },\r\n            xaxis: {\r\n            categories: inters,\r\n            labels: {\r\n                formatter: function (val) {\r\n                return val\r\n                }\r\n            }\r\n            },\r\n            yaxis: {\r\n            title: {\r\n                text: undefined\r\n            },\r\n            },\r\n            tooltip: {\r\n            y: {\r\n                formatter: function (val) {\r\n                return val\r\n                }\r\n            }\r\n            },\r\n            fill: {\r\n            opacity: 1\r\n            },\r\n            legend: {\r\n            position: 'top',\r\n            horizontalAlign: 'left',\r\n            offsetX: 40\r\n            }\r\n            };\r\n\r\n            var chart = new ApexCharts(document.querySelector(\"#chart2\"), options);\r\n            chart.render();\r\n\r\n    }\r\n    // on:load={covid}\r\n\r\n</script>\r\n\r\n<svelte:head>\r\n    <!--<script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load={hospitalized} on:load={covid} on:load={vehiculos} on:load={roads} on:load={population}></script>-->\r\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load={population} on:load={bicis} on:load={hospitalized} on:load={covid} on:load={vehiculos} on:load={roads}></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\"></script>\r\n</svelte:head>\r\n<main>\r\n\r\n    <h1>SPC Manager</h1>\r\n    <Button outline color=\"success\" on:click=\"{getSPCLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button outline color=\"danger\" on:click=\"{deleteSPCALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <br><br>\r\n\r\n    <!--api externa densidad-->\r\n    <div class=\"contenedor\">\r\n    <h3 style=\"text-align: center;\">Integración API externa 1</h3>\r\n    <figure class=\"highcharts-figure\">\r\n        <div id=\"container\"></div>\r\n        <p class=\"highcharts-description\"></p>\r\n    </figure>\r\n    </div>\r\n    <br>\r\n\r\n    <!--api externa covid--> \r\n    <div class=\"contenedor\">\r\n    <h3 style=\"text-align: center;\">Integración API externa 2</h3>\r\n    <div id=\"chart2\">\r\n    </div></div> <br>\r\n\r\n    <!--api nando-->\r\n    <div class=\"contenedor\">\r\n    <h3 style=\"text-align: center;\">Integración API sos1920-09</h3>\r\n    <div id=\"chart\">\r\n    </div></div> <br>\r\n\r\n    <!--api dani-->\r\n    <div class=\"contenedor\">\r\n    <h3 style=\"text-align: center;\">Integración API sos1920-04</h3>\r\n    <div id=\"chart3\">\r\n    </div></div> <br>\r\n\r\n    <!--api ana-->\r\n    <div class=\"contenedor\">\r\n    <h3 style=\"text-align: center;\">Integración API sos1920-02</h3>\r\n    <p style=\"text-align: center;\"><b>Distancia de carriles bicis en España en relación al número de suicidios en un año</b></p>\r\n    <div id=\"chart4\">\r\n    </div></div> <br>\r\n\r\n    <!--api juan-->\r\n    <div class=\"contenedor\">\r\n      <h3 style=\"text-align: center;\">Integración API sos1920-06</h3>\r\n      <div id=\"chart5\">\r\n      </div></div> <br>\r\n    \r\n</main>\r\n\r\n<style>\r\n    h3{\r\n        text-decoration: underline;\r\n    }\r\n.highcharts-figure, .highcharts-data-table table {\r\n    min-width: 310px; \r\n    max-width: 800px;\r\n    margin: 1em auto;\r\n}\r\n\r\n#container {\r\n    height: 400px;\r\n}\r\n\r\n.highcharts-data-table table {\r\n\tfont-family: Verdana, sans-serif;\r\n\tborder-collapse: collapse;\r\n\tborder: 1px solid #EBEBEB;\r\n\tmargin: 10px auto;\r\n\ttext-align: center;\r\n\twidth: 100%;\r\n\tmax-width: 500px;\r\n}\r\n.highcharts-data-table caption {\r\n    padding: 1em 0;\r\n    font-size: 1.2em;\r\n    color: #555;\r\n}\r\n.highcharts-data-table th {\r\n\tfont-weight: 600;\r\n    padding: 0.5em;\r\n}\r\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n    padding: 0.5em;\r\n}\r\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n    background: #f8f8f8;\r\n}\r\n.highcharts-data-table tr:hover {\r\n    background: #f1f7ff;\r\n}\r\n\r\n.contenedor{\r\n    border: 2px solid LightGray;\r\n  border-radius: 5px;\r\n  padding-top: 2%;\r\n}\r\n</style>",
    "\r\n<script>\r\n  import {\r\n      onMount\r\n   } from \"svelte\";\r\n   import {\r\n        pop\r\n    } from \"svelte-spa-router\";\r\n\r\n    function filtro(array,cont, year){\r\n      var res=array.filter((el)=>{\r\n      return el.continent==\"europe\" && el.year==\"2017\";\r\n      });\r\n\r\n      return res;\r\n    }\r\n\r\n    async function loadGraphs(){\r\n\r\n      let MyData=[];\r\n      const resData = await fetch(\"/api/v2/poverty-stats\");\r\n      MyData = await resData.json();\r\n    \r\n      //recoger datos por continentes\r\n      \r\n      var euro = MyData.filter((el)=>{\r\n        return el.continent==\"europe\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var asia = MyData.filter((el)=>{\r\n      return el.continent==\"asia\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var oceania =MyData.filter((el)=>{\r\n      return el.continent==\"oceania\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var africa =MyData.filter((el)=>{\r\n      return el.continent==\"africa\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var south =MyData.filter((el)=>{\r\n      return el.continent==\"south america\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n      var north =MyData.filter((el)=>{\r\n      return el.continent==\"north america\" && el.year==\"2017\";\r\n      }).map((dato)=>{\r\n        return parseFloat(dato.under_320);\r\n      })[0];\r\n\r\n      console.log(euro);\r\n\r\n      var options = {\r\n          series: [euro,asia,oceania,africa,south,north],\r\n          chart: {\r\n          type: 'donut',\r\n        },\r\n        labels:[\"europa\",\"asia\",\"oceania\",\"africa\",\"south america\",\"north america\"],\r\n          responsive: [{\r\n            breakpoint: 480,\r\n            options: {\r\n              chart: {\r\n                width: 200\r\n              },\r\n              legend: {\r\n                position: 'bottom'\r\n              }\r\n            }\r\n          }]\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n        chart.render();\r\n  }\r\n\r\n    \r\n  </script>\r\n  \r\n<svelte:head>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\"on:load=\"{loadGraphs}\"></script>\r\n</svelte:head>\r\n\r\n<main>\r\n  <h1>Porcentaje de pobreza inferior del 3.2 por continente en 2017</h1>\r\n  <div id=\"chart\">\r\n  </div>\r\n</main>\r\n\r\n<style>\r\n  #chart{\r\n    width: 80%;\r\n  }\r\n</style>",
    "<script>\r\n    import{\r\n        onMount\r\n    } from \"svelte\";\r\n    import{\r\n        Alert\r\n    } from \"sveltestrap\";\r\n\r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n\r\n    let errorMSG = \"\";\r\n    let lq =[];\r\n    onMount(getLQ);\r\n\r\n    //GET\r\n    async function getLQ() {\r\n        console.log(\"Fetching lq...\");\r\n        const res = await fetch(\"api/v2/lq-stats?limit=10&offset=1\");\r\n        LoadGraphs();\r\n        if(res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \"lq.\");\r\n        } else{\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        } \r\n    }\r\n\r\n    //GET LoadInitialData\r\n    async function getLQLoadInitialData() {\r\n\r\n        console.log(\"Fetching lq...\");\r\n        await fetch(\"/api/v2/lq-stats/loadInitialData\")\r\n        const res = await fetch(\"/api/v2/lq-stats?limit=10&offset=\"+1);\r\n        LoadGraphs();\r\n\r\n        if (res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \" lq.\");\r\n        } else {\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteLQALL(){\r\n        const res = await fetch(\"/api/v2/lq-stats\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res){\r\n            LoadGraphs();\r\n            visible = true;\r\n            if(res.status==200){\r\n                color = \"sucess\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all lq.\");\r\n            } else if(res.status==400){\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUST\");\r\n            } else{\r\n                color = \"danger\";\r\n                errorMSG = res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //gráfica\r\n    async function LoadGraphs(){\r\n        let MyData = [];\r\n\r\n        const resData = await fetch(\"/api/v2/lq-stats\");\r\n        MyData = await resData.json();\r\n\r\n        //xAxis\r\n        var paises = MyData.filter(function (objeto) {\r\n                return objeto.year==2016;\r\n            }).map((dato)=> [dato.country]);\r\n\r\n        //yAxis\r\n\r\n        var stab = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.stability]);\r\n\r\n        var righ = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.right]);\r\n\r\n        var heal = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.health]);\r\n\r\n        var secu = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.security]);\r\n\r\n        var clima = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.climate]);\r\n\r\n        var cost = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.costs]);\r\n\r\n        var popu = MyData.filter(function(objeto){\r\n                return objeto.year==2016;\r\n        }).map((dato)=> [dato.popularity]);\r\n\r\n\r\n        Highcharts.chart('container', {\r\n            chart: {\r\n                type: 'bar'\r\n            },\r\n            title: {\r\n                text: 'Calidad de vida por países del año 2016'\r\n            },\r\n            xAxis: {\r\n                categories: paises\r\n            },\r\n            yAxis: {\r\n                min: 0,\r\n                title: {\r\n                    text: ''\r\n                }\r\n            },\r\n            legend: {\r\n                reversed: true\r\n            },\r\n            plotOptions: {\r\n                series: {\r\n                    stacking: 'normal'\r\n                }\r\n            },\r\n            series: [{\r\n                name: 'Stability',\r\n                data: stab\r\n            }, {\r\n                name: 'Right',\r\n                data: righ\r\n            }, {\r\n                name: 'Health',\r\n                data: heal\r\n            }, {\r\n                name: 'Security',\r\n                data: secu\r\n            }, {\r\n                name: 'Climate',\r\n                data: clima\r\n            }, {\r\n                name: 'Costs',\r\n                data: cost\r\n            }, {\r\n                name: 'Popularity',\r\n                data: popu\r\n            }]\r\n        });\r\n\r\n\r\n};\r\n</script>\r\n\r\n\r\n<svelte:head>\r\n    <script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/exporting.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/export-data.js\"></script>\r\n    <script src=\"https://code.highcharts.com/modules/accessibility.js\" on:load=\"{LoadGraphs}\"></script>\r\n</svelte:head>\r\n\r\n<main>\r\n    <h1>LQ Manager</h1>\r\n    <Button color=\"primary\" on:click=\"{getLQLoadInitialData}\">\r\n        Reiniciar ejemplos iniciales\r\n    </Button>\r\n    <Button color=\"danger\" on:click=\"{deleteLQALL}\">\r\n        Borrar todo\r\n    </Button>\r\n    <figure class=\"highcharts-figure\">\r\n        <div id=\"container\"></div>\r\n        <p class=\"highcharts-description\">\r\n            En esta gráfica veremos la clasificación de los países dependiendo de su calidad de vida en 2016 basándonos en algunos datos de dichos países, como puede ser su popularidad, clima, seguridad, etc.\r\n        </p>\r\n    </figure>\r\n</main>\r\n\r\n<style>\r\n    .highcharts-figure, .highcharts-data-table table {\r\n        min-width: 310px; \r\n        max-width: 800px;\r\n        margin: 1em auto;\r\n    }\r\n\r\n    #container {\r\n        height: 400px;\r\n    }\r\n\r\n    .highcharts-data-table table {\r\n        font-family: Verdana, sans-serif;\r\n        border-collapse: collapse;\r\n        border: 1px solid #EBEBEB;\r\n        margin: 10px auto;\r\n        text-align: center;\r\n        width: 100%;\r\n        max-width: 500px;\r\n    }\r\n    .highcharts-data-table caption {\r\n        padding: 1em 0;\r\n        font-size: 1.2em;\r\n        color: #555;\r\n    }\r\n    .highcharts-data-table th {\r\n        font-weight: 600;\r\n        padding: 0.5em;\r\n    }\r\n    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n        padding: 0.5em;\r\n    }\r\n    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n        background: #f8f8f8;\r\n    }\r\n    .highcharts-data-table tr:hover {\r\n        background: #f1f7ff;\r\n    }\r\n\r\n</style>",
    "<script>\r\n    import{\r\n        onMount\r\n    } from \"svelte\";\r\n    import{\r\n        Alert\r\n    } from \"sveltestrap\";\r\n\r\n    import Table from \"sveltestrap/src/Table.svelte\";\r\n    import Button from \"sveltestrap/src/Button.svelte\";\r\n\r\n    //ALERTAS\r\n    let visible = false;\r\n    let color = \"danger\";\r\n\r\n    let errorMSG = \"\";\r\n    let lq =[];\r\n    onMount(getLQ);\r\n\r\n    //funcion transofrmar a minuscula\r\n    function toMinus(palabra) {\r\n        palabra=palabra.charAt(0).toLowerCase() + palabra.slice(1);\r\n        return palabra;\r\n    }\r\n    console.log(toMinus(\"Hola\"));\r\n\r\n    //GET\r\n    async function getLQ() {\r\n        console.log(\"Fetching lq...\");\r\n        const res = await fetch(\"api/v2/lq-stats?limit=10&offset=1\");\r\n        if(res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \"lq.\");\r\n        } else{\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        } \r\n    }\r\n\r\n    //GET LoadInitialData\r\n    async function getLQLoadInitialData() {\r\n\r\n        console.log(\"Fetching lq...\");\r\n        await fetch(\"/api/v2/lq-stats/loadInitialData\")\r\n        const res = await fetch(\"/api/v2/lq-stats?limit=10&offset=\"+1);\r\n\r\n        if (res.ok){\r\n            console.log(\"Ok\");\r\n            const json = await res.json();\r\n            lq = json;\r\n            console.log(\"Received \" + lq.length + \" lq.\");\r\n        } else {\r\n            errorMSG = res.status + \": \" + res.statusText;\r\n            console.log(\"ERROR!\");\r\n        }\r\n    }\r\n\r\n    //DELETE ALL\r\n    async function deleteLQALL(){\r\n        const res = await fetch(\"/api/v2/lq-stats\", {\r\n            method: \"DELETE\"\r\n        }).then(function (res){\r\n            visible = true;\r\n            if(res.status==200){\r\n                color = \"sucess\";\r\n                errorMSG = \"Objetos borrados correctamente\";\r\n                console.log(\"Deleted all lq.\");\r\n            } else if(res.status==400){\r\n                color = \"danger\";\r\n                errorMSG = \"Ha ocurrido un fallo\";\r\n                console.log(\"BAD REQUST\");\r\n            } else{\r\n                color = \"danger\";\r\n                errorMSG = res.status + \": \" + res.statusText;\r\n                console.log(\"ERROR!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    //api externa 1 (coronavirus)\r\n\r\n    async function coronavirus(){\r\n\r\n    let covid = [];\r\n    let lifeq = [];\r\n    let lista_comun = [];\r\n    let confirmados = [];\r\n\r\n    const res1 = await fetch(\"https://sos1920-27.herokuapp.com/api/v2/lq-stats\")\r\n    lifeq = await res1.json();\r\n    const res2 = await fetch(\"https://coronavirus-tracker-api.herokuapp.com/v2/locations\");\r\n    covid = await res2.json();\r\n\r\n    var paises = covid.locations.map(dato=> dato.country);\r\n    var pruieba = covid.locations.map(dato=> dato.country);\r\n\r\n    var misPaises = lifeq.map(dato=> dato.country);\r\n    var salud = [];\r\n\r\n    //para tener los países comunes\r\n    for (let i = 0; i < misPaises.length; i++) {\r\n        for (let j = 0; j < paises.length; j++) {\r\n            if(misPaises[i].localeCompare(toMinus(paises[j])) == 0){\r\n                lista_comun.push(misPaises[i])\r\n                confirmados.push()\r\n            }\r\n            \r\n        }\r\n        \r\n    }\r\n    let conjunto = new Set(lista_comun);\r\n\r\n    let lista_final = Array.from(conjunto);\r\n\r\n    let lista = [];\r\n    //coger los casos confirmados de covid por cada pais\r\n    for (let index = 0; index < lista_final.length; index++) {\r\n        var llamada = await fetch(\"https://coronavirus-tracker-api.herokuapp.com/v2/locations?country=\"+lista_final[index]);\r\n        var datos = await llamada.json();\r\n        lista.push(datos.latest.confirmed)\r\n        \r\n    }\r\n    console.log(lista)\r\n\r\n    //coger salud paises comunes\r\n    for (let index = 0; index < lifeq.length; index++) {\r\n        if (lista_final.includes(lifeq[index].country)) {\r\n            salud.push(lifeq[index].health)\r\n        }\r\n        \r\n    }\r\n    \r\n    //grafica\r\n    Highcharts.chart('container', {\r\n  chart: {\r\n    type: 'column'\r\n  },\r\n  title: {\r\n    text: 'Comparación del nivel de salud de cada país respecto a los casos confirmados por Covid-19'\r\n  },\r\n  xAxis: {\r\n    categories: lista_final\r\n  },\r\n  yAxis: [{\r\n    min: 0,\r\n    title: {\r\n      text: 'Nivel de Salud'\r\n    }\r\n  }, {\r\n    title: {\r\n      text: 'Casos confirmados por covid'\r\n    },\r\n    opposite: true\r\n  }],\r\n  legend: {\r\n    shadow: false\r\n  },\r\n  tooltip: {\r\n    shared: true\r\n  },\r\n  plotOptions: {\r\n    column: {\r\n      grouping: false,\r\n      shadow: false,\r\n      borderWidth: 0\r\n    }\r\n  },\r\n  series: [{\r\n    name: 'Nivel de Salud',\r\n    color: 'rgba(165,170,217,1)',\r\n    data: salud,\r\n    pointPadding: 0.3,\r\n    pointPlacement: -0.2\r\n  }, {\r\n    name: 'Casos confirmados por covid',\r\n    color: 'rgba(248,161,63,1)',\r\n    data: lista,\r\n    tooltip: {\r\n      valuePrefix: '',\r\n      valueSuffix: ' '\r\n    },\r\n    pointPadding: 0.3,\r\n    pointPlacement: 0.2,\r\n    yAxis: 1\r\n  }]\r\n});\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n<svelte:head>\r\n    <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n<script src=\"https://code.highcharts.com/modules/export-data.js\" on:load=\"{coronavirus}\"></script>\r\n</svelte:head>\r\n\r\n<main>\r\n    <h3>API Externa 1 - <a href=\"https://coronavirus-tracker-api.herokuapp.com/v2/locations\">Link EndPoint</a></h3>\r\n    <figure class=\"highcharts-figure\">\r\n  <div id=\"container\"></div>\r\n  <p class=\"highcharts-description\">\r\n    En esta gráfica podemos ver la comparación del nivel de salud de cada país respecto a los casos confirmados por la nueva pandemia mundial, el Covid-19\r\n  </p>\r\n</figure>\r\n\r\n<h3>API Externa 2 - <a href=\"https://coronavirus-tracker-api.herokuapp.com/v2/locations\">Link EndPoint</a></h3>\r\n\r\n<h3>API sos1920-09 - <a href=\"http://sos1920-09.herokuapp.com/api/v4/renewable-sources-stats\">Link EndPoint</a></h3>\r\n\r\n<h3>API sos1920-12 - <a href=\"https://sos1920-12.herokuapp.com/api/v2/overdose-deaths\">Link EndPoint</a></h3>\r\n\r\n<h3>API sos1920-04 - <a href=\"https://sos1920-04.herokuapp.com/api/v1/vehicles\">Link EndPoint</a></h3>\r\n\r\n</main>\r\n\r\n\r\n<style>\r\n    .highcharts-figure, .highcharts-data-table table {\r\n  min-width: 310px; \r\n  max-width: 800px;\r\n  margin: 1em auto;\r\n}\r\n\r\n#container {\r\n  height: 400px;\r\n}\r\n\r\n.highcharts-data-table table {\r\n\tfont-family: Verdana, sans-serif;\r\n\tborder-collapse: collapse;\r\n\tborder: 1px solid #EBEBEB;\r\n\tmargin: 10px auto;\r\n\ttext-align: center;\r\n\twidth: 100%;\r\n\tmax-width: 500px;\r\n}\r\n.highcharts-data-table caption {\r\n  padding: 1em 0;\r\n  font-size: 1.2em;\r\n  color: #555;\r\n}\r\n.highcharts-data-table th {\r\n\tfont-weight: 600;\r\n  padding: 0.5em;\r\n}\r\n.highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {\r\n  padding: 0.5em;\r\n}\r\n.highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {\r\n  background: #f8f8f8;\r\n}\r\n.highcharts-data-table tr:hover {\r\n  background: #f1f7ff;\r\n}\r\n</style>"
  ],
  "names": [],
  "mappings": "AA6IC,QAAQ,IAAI,8CAA8C,CAAC,CAAC,AAM7D,MAAM,cAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CAAC,IAAI,AACnB,CAAC;ACqjBG,gBAAE,CAAC,AACC,eAAe,CAAE,SAAS,AAC9B,CAAC,AACL,kBAAkB,cAA+B,CAAC,AAC9C,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,cAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC,AA8BD,yBAAW,CAAC,AACR,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,SAAS,CAC7B,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,EAAE,AACjB,CAAC;ACzpBC,oBAAM,CAAC,AACL,KAAK,CAAE,GAAG,AACZ,CAAC;ACoGC,kBAAkB,eAA+B,CAAC,AAC9C,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AACpB,CAAC,AAED,UAAU,eAAC,CAAC,AACR,MAAM,CAAE,KAAK,AACjB,CAAC;ACkBD,kBAAkB,aAA+B,CAAC,AACpD,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,GAAG,CAAC,IAAI,AAClB,CAAC,AAED,UAAU,aAAC,CAAC,AACV,MAAM,CAAE,KAAK,AACf,CAAC"
}